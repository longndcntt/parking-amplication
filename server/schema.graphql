# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

type Customer {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  phone: String
  updatedAt: DateTime!
}

input CustomerCreateInput {
  email: String
  firstName: String
  lastName: String
  orders: OrderCreateNestedManyWithoutCustomersInput
  phone: String
}

input CustomerOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

input CustomerUpdateInput {
  email: String
  firstName: String
  lastName: String
  orders: OrderUpdateManyWithoutCustomersInput
  phone: String
}

input CustomerWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  phone: StringNullableFilter
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  createOrder(data: OrderCreateInput!): Order!
  createParking(data: ParkingCreateInput!): Parking!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteOrder(where: OrderWhereUniqueInput!): Order!
  deleteParking(where: ParkingWhereUniqueInput!): Parking!
  deleteProduct(where: ProductWhereUniqueInput!): Product!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateParking(data: ParkingUpdateInput!, where: ParkingWhereUniqueInput!): Parking!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Order {
  createdAt: DateTime!
  customer: Customer
  discount: Float
  id: String!
  product: Product
  quantity: Float
  totalPrice: Float
  updatedAt: DateTime!
}

input OrderCreateInput {
  customer: CustomerWhereUniqueInput
  discount: Float
  product: ProductWhereUniqueInput
  quantity: Float
  totalPrice: Float
}

input OrderCreateNestedManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateNestedManyWithoutProductsInput {
  connect: [OrderWhereUniqueInput!]
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  createdAt: SortOrder
  customerId: SortOrder
  discount: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  updatedAt: SortOrder
}

input OrderUpdateInput {
  customer: CustomerWhereUniqueInput
  discount: Float
  product: ProductWhereUniqueInput
  quantity: Float
  totalPrice: Float
}

input OrderUpdateManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderUpdateManyWithoutProductsInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderWhereInput {
  customer: CustomerWhereUniqueInput
  discount: FloatNullableFilter
  id: StringFilter
  product: ProductWhereUniqueInput
  quantity: IntNullableFilter
  totalPrice: IntNullableFilter
}

input OrderWhereUniqueInput {
  id: String!
}

type Parking {
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime!
  id: String!
  plate: String
  updatedAt: DateTime!
}

input ParkingCreateInput {
  checkin: DateTime
  checkout: DateTime
  plate: String
}

input ParkingOrderByInput {
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  id: SortOrder
  plate: SortOrder
  updatedAt: SortOrder
}

input ParkingUpdateInput {
  checkin: DateTime
  checkout: DateTime
  plate: String
}

input ParkingWhereInput {
  checkin: DateTimeNullableFilter
  checkout: DateTimeNullableFilter
  id: StringFilter
  plate: StringNullableFilter
}

input ParkingWhereUniqueInput {
  id: String!
}

type Product {
  createdAt: DateTime!
  description: String
  id: String!
  itemPrice: Float
  name: String
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  updatedAt: DateTime!
}

input ProductCreateInput {
  description: String
  itemPrice: Float
  name: String
  orders: OrderCreateNestedManyWithoutProductsInput
}

input ProductOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  itemPrice: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ProductUpdateInput {
  description: String
  itemPrice: Float
  name: String
  orders: OrderUpdateManyWithoutProductsInput
}

input ProductWhereInput {
  description: StringNullableFilter
  id: StringFilter
  itemPrice: FloatNullableFilter
  name: StringNullableFilter
  orders: OrderListRelationFilter
}

input ProductWhereUniqueInput {
  id: String!
}

type Query {
  _customersMeta(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _ordersMeta(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): MetaQueryPayload!
  _parkingsMeta(orderBy: [ParkingOrderByInput!], skip: Float, take: Float, where: ParkingWhereInput): MetaQueryPayload!
  _productsMeta(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  parking(where: ParkingWhereUniqueInput!): Parking
  parkings(orderBy: [ParkingOrderByInput!], skip: Float, take: Float, where: ParkingWhereInput): [Parking!]!
  product(where: ProductWhereUniqueInput!): Product
  products(orderBy: [ProductOrderByInput!], skip: Float, take: Float, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
