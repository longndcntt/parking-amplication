/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParkingArgs } from "./CreateParkingArgs";
import { UpdateParkingArgs } from "./UpdateParkingArgs";
import { DeleteParkingArgs } from "./DeleteParkingArgs";
import { ParkingFindManyArgs } from "./ParkingFindManyArgs";
import { ParkingFindUniqueArgs } from "./ParkingFindUniqueArgs";
import { Parking } from "./Parking";
import { ParkingService } from "../parking.service";

@graphql.Resolver(() => Parking)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ParkingResolverBase {
  constructor(
    protected readonly service: ParkingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "read",
    possession: "any",
  })
  async _parkingsMeta(
    @graphql.Args() args: ParkingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Parking])
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "read",
    possession: "any",
  })
  async parkings(
    @graphql.Args() args: ParkingFindManyArgs
  ): Promise<Parking[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Parking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "read",
    possession: "own",
  })
  async parking(
    @graphql.Args() args: ParkingFindUniqueArgs
  ): Promise<Parking | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parking)
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "create",
    possession: "any",
  })
  async createParking(
    @graphql.Args() args: CreateParkingArgs
  ): Promise<Parking> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parking)
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "update",
    possession: "any",
  })
  async updateParking(
    @graphql.Args() args: UpdateParkingArgs
  ): Promise<Parking | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Parking)
  @nestAccessControl.UseRoles({
    resource: "Parking",
    action: "delete",
    possession: "any",
  })
  async deleteParking(
    @graphql.Args() args: DeleteParkingArgs
  ): Promise<Parking | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
